{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nlet AddTokenInterceptor = /*#__PURE__*/(() => {\n  class AddTokenInterceptor {\n    constructor(router, toastr) {\n      this.router = router;\n      this.toastr = toastr;\n    }\n    intercept(request, next) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n      return next.handle(request).pipe(catchError(error => {\n        if (error.status === 401) {\n          this.toastr.error('Sesion expirada, por favor vuelva loguarse', 'Error!');\n          this.router.navigate(['/inicio/login']);\n        }\n        return throwError(error);\n      }));\n    }\n  }\n  AddTokenInterceptor.ɵfac = function AddTokenInterceptor_Factory(t) {\n    return new (t || AddTokenInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n  };\n  AddTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddTokenInterceptor,\n    factory: AddTokenInterceptor.ɵfac\n  });\n  return AddTokenInterceptor;\n})();\nexport { AddTokenInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}